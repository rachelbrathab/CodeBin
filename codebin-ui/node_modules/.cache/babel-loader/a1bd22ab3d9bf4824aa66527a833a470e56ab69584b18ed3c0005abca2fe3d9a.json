{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RACHEL BRATHAB\\\\Desktop\\\\CodeBinProject\\\\codebin-ui\\\\src\\\\components\\\\SnippetPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { Card, Spinner, Alert, Button, Container, ListGroup } from 'react-bootstrap';\nimport Editor, { useMonaco } from '@monaco-editor/react'; // 1. Import useMonaco\nimport { toast } from 'react-hot-toast';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { FaPlus, FaPlayCircle, FaCheckCircle, FaTimesCircle, FaCopy } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SnippetPage = ({\n  theme\n}) => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [snippet, setSnippet] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const editorRef = useRef(null);\n  // const monacoRef = useRef(null); // No longer needed for analysis\n  const monaco = useMonaco(); // 2. Get the monaco instance via hook\n  const [analysis, setAnalysis] = useState([]);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  useEffect(() => {\n    // ... (This hook is unchanged)\n    const fetchSnippet = async () => {\n      try {\n        setLoading(true);\n        setError('');\n        const response = await axios.get(`http://localhost:5000/api/snippets/${id}`);\n        setSnippet(response.data);\n      } catch (err) {\n        var _err$response, _err$response$data;\n        setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Snippet not found.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSnippet();\n  }, [id]);\n  function handleEditorDidMount(editor, _monacoInstance) {\n    // Renamed _monacoInstance\n    editorRef.current = editor;\n    // monacoRef.current = monaco; // No longer needed\n  }\n\n  // --- UPDATED Helper Function ---\n  // Formats errors from both sources\n  const processMarkers = (markers, isPython = false) => {\n    // 3. Check if monaco is available before using MarkerSeverity\n    const severityError = monaco ? monaco.MarkerSeverity.Error : 8; // Default to 8 if monaco isn't ready\n\n    if (markers.length === 0) {\n      setAnalysis([{\n        type: 'success',\n        message: 'No errors or warnings found. This code looks clean!'\n      }]);\n    } else {\n      const formattedSuggestions = markers.map(marker => {\n        // This formats errors from Monaco/TypeScript service (JS, HTML, etc.)\n        if (!isPython) {\n          var _marker$messageText, _marker$messageText$i, _marker$messageText2, _marker$messageText2$, _marker$messageText3, _marker$messageText3$, _marker$messageText4, _marker$messageText4$, _marker$message, _marker$message$inclu, _marker$messageText5, _marker$messageText5$, _marker$message2, _marker$message2$incl, _marker$start;\n          let customSuggestion = 'Review the error and your code logic.';\n          if ((_marker$messageText = marker.messageText) !== null && _marker$messageText !== void 0 && (_marker$messageText$i = _marker$messageText.includes) !== null && _marker$messageText$i !== void 0 && _marker$messageText$i.call(_marker$messageText, \"';' expected\")) {\n            // Check messageText for TS diagnostics\n            customSuggestion = `Suggestion: Try adding a semicolon ';' at the end of line ${marker.startLineNumber - 1}.`;\n          }\n          if ((_marker$messageText2 = marker.messageText) !== null && _marker$messageText2 !== void 0 && (_marker$messageText2$ = _marker$messageText2.includes) !== null && _marker$messageText2$ !== void 0 && _marker$messageText2$.call(_marker$messageText2, \"is not defined\")) {\n            customSuggestion = `Suggestion: Make sure the variable or function \"${marker.messageText.split(\"'\")[1]}\" is defined, imported, and spelled correctly.`;\n          }\n          if ((_marker$messageText3 = marker.messageText) !== null && _marker$messageText3 !== void 0 && (_marker$messageText3$ = _marker$messageText3.includes) !== null && _marker$messageText3$ !== void 0 && _marker$messageText3$.call(_marker$messageText3, \"Expected corresponding closing tag\")) {\n            const tagName = marker.messageText.split(\"'\")[1];\n            customSuggestion = `Suggestion: The <${tagName}> tag on line ${marker.startLineNumber} is not closed. Try adding a </${tagName}> tag.`;\n          }\n          if (((_marker$messageText4 = marker.messageText) !== null && _marker$messageText4 !== void 0 && (_marker$messageText4$ = _marker$messageText4.includes) !== null && _marker$messageText4$ !== void 0 && _marker$messageText4$.call(_marker$messageText4, \"Cannot assign to\") || (_marker$message = marker.message) !== null && _marker$message !== void 0 && (_marker$message$inclu = _marker$message.includes) !== null && _marker$message$inclu !== void 0 && _marker$message$inclu.call(_marker$message, \"Cannot assign to\")) && ((_marker$messageText5 = marker.messageText) !== null && _marker$messageText5 !== void 0 && (_marker$messageText5$ = _marker$messageText5.includes) !== null && _marker$messageText5$ !== void 0 && _marker$messageText5$.call(_marker$messageText5, \"constant\") || (_marker$message2 = marker.message) !== null && _marker$message2 !== void 0 && (_marker$message2$incl = _marker$message2.includes) !== null && _marker$message2$incl !== void 0 && _marker$message2$incl.call(_marker$message2, \"constant\"))) {\n            customSuggestion = `Suggestion: You declared this variable with 'const', which means it cannot be reassigned. Use 'let' instead if you need to change its value.`;\n          }\n          return {\n            // TS diagnostics use 'category', Monaco markers use 'severity'\n            type: marker.category === 1 /* Error */ || marker.severity === severityError ? 'danger' : 'warning',\n            // TS diagnostics use 0-based lines from getSemanticDiagnostics, Monaco markers are 1-based\n            line: marker.startLineNumber || (((_marker$start = marker.start) === null || _marker$start === void 0 ? void 0 : _marker$start.line) || 0) + 1,\n            // TS diagnostics use messageText (can be complex object), Monaco markers use message\n            message: typeof marker.messageText === 'string' ? marker.messageText : marker.message || \"Unknown error\",\n            suggestion: customSuggestion\n          };\n        }\n\n        // This formats errors from our py_compile API\n        else {\n          let customSuggestion = `Suggestion: ${marker.message}.`;\n          if (marker.message.includes(\"Invalid syntax\")) {\n            customSuggestion = `Suggestion: ${marker.message}. Check for typos (like 'defs' instead of 'def'), missing colons, or incorrect indentation.`;\n          }\n          return {\n            type: 'danger',\n            line: marker.line,\n            message: marker.message,\n            suggestion: customSuggestion\n          };\n        }\n      });\n      setAnalysis(formattedSuggestions);\n    }\n    setIsAnalyzing(false);\n  };\n\n  // --- THIS IS THE FINAL \"ANALYZE\" FUNCTION ---\n  const handleAnalyzeCode = async () => {\n    // 4. Check for editorRef AND the monaco instance from the hook\n    if (!editorRef.current || !monaco) {\n      console.error(\"Editor or Monaco instance not ready.\");\n      return;\n    }\n    setIsAnalyzing(true);\n    setAnalysis([]);\n    const language = snippet.language;\n    const model = editorRef.current.getModel();\n    if (!model) {\n      console.error(\"Editor model not found.\");\n      setIsAnalyzing(false);\n      return;\n    }\n    const modelUri = model.uri;\n\n    // --- ROUTE 1: PYTHON ANALYSIS (Back-end) ---\n    if (language === 'python') {\n      try {\n        const response = await axios.post('http://localhost:5000/api/analyze/python', {\n          code: snippet.content\n        });\n        processMarkers(response.data, true);\n      } catch (err) {\n        setAnalysis([{\n          type: 'danger',\n          message: 'Error running Python analyzer on server.'\n        }]);\n        setIsAnalyzing(false);\n      }\n    }\n\n    // --- ROUTE 2: MONACO/TYPESCRIPT ANALYSIS (Front-end) ---\n    // This now directly asks the language service worker for errors\n    else if (language === 'javascript' || language === 'typescript') {\n      // Get the worker proxy for TypeScript/JavaScript\n      const worker = await monaco.languages.typescript.getTypeScriptWorker();\n      const client = await worker(modelUri);\n\n      // Request both syntactic and semantic diagnostics (errors/warnings)\n      const diagnostics = await Promise.all([client.getSyntacticDiagnostics(modelUri.toString()), client.getSemanticDiagnostics(modelUri.toString())]);\n\n      // Flatten the array of arrays into a single array\n      const allDiagnostics = diagnostics.flat();\n\n      // Convert TypeScript Diagnostic objects into a format processMarkers understands\n      const formattedMarkers = allDiagnostics.map(diag => ({\n        startLineNumber: diag.start / model.getLineCount() + 1,\n        // Approximate line number calculation might be needed if start isn't available\n        // Alternatively, if diag.start has line/character:\n        // startLineNumber: diag.start.line + 1,\n        messageText: diag.messageText,\n        // Use messageText for TS diagnostics\n        category: diag.category,\n        // 1 for Error, others for Warning/Suggestion/Message\n        // Add severity if needed, mapping from category\n        severity: diag.category === 1 ? monaco.MarkerSeverity.Error : monaco.MarkerSeverity.Warning\n      }));\n      processMarkers(formattedMarkers, false);\n    } else {\n      // Fallback for HTML/CSS/Other - use getModelMarkers (might still be unreliable)\n      editorRef.current.focus(); // Wake up the linter (might still be needed here)\n      setTimeout(() => {\n        // Give it a moment\n        const markers = monaco.editor.getModelMarkers({\n          resource: modelUri\n        });\n        processMarkers(markers, false);\n      }, 300); // Small delay before checking markers for non-TS/JS languages\n    }\n  };\n  const onCopyCode = () => {\n    toast.success('Code copied to clipboard!');\n  };\n\n  // ... (Loading and Error states are unchanged)\n  if (loading) {/* ... */}\n  if (error) {/* ... */}\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: \"mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      as: Link,\n      to: \"/\",\n      variant: \"secondary\",\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(FaPlus, {\n        className: \"me-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), \" Create New Snippet\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), snippet && /*#__PURE__*/_jsxDEV(Card, {\n      className: \"editor-card\",\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        children: [\"Language: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: snippet.language\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 23\n        }, this), \" | Created: \", new Date(snippet.createdAt).toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: /*#__PURE__*/_jsxDEV(Editor, {\n          height: \"60vh\",\n          theme: theme === 'dark' ? 'vs-dark' : 'vs-light',\n          language: snippet.language,\n          value: snippet.content,\n          onMount: handleEditorDidMount // Keep onMount\n          ,\n          options: {\n            readOnly: true,\n            domReadOnly: true,\n            minimap: {\n              enabled: true\n            },\n            validate: true // Keep validate true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"success\",\n            onClick: handleAnalyzeCode,\n            className: \"py-2\",\n            disabled: isAnalyzing,\n            children: isAnalyzing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\" \", /*#__PURE__*/_jsxDEV(Spinner, {\n                as: \"span\",\n                animation: \"border\",\n                size: \"sm\",\n                role: \"status\",\n                \"aria-hidden\": \"true\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 23\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ms-2\",\n                children: \"Analyzing...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 107\n              }, this), \" \"]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\" \", /*#__PURE__*/_jsxDEV(FaPlayCircle, {\n                className: \"me-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 23\n              }, this), \" Analyze Code \"]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CopyToClipboard, {\n            text: snippet.content,\n            onCopy: onCopyCode,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              className: \"ms-2 py-2\",\n              children: [/*#__PURE__*/_jsxDEV(FaCopy, {\n                className: \"me-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 19\n              }, this), \" Copy Code\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), analysis.length > 0 &&\n        /*#__PURE__*/\n        // ... (Analysis results section is unchanged)\n        _jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: \" /* ... */ \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n_s(SnippetPage, \"Q42XG/5RpqDHlsTpLwPuMxZWngg=\", false, function () {\n  return [useParams, useMonaco];\n});\n_c = SnippetPage;\nexport default SnippetPage;\nvar _c;\n$RefreshReg$(_c, \"SnippetPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","Link","axios","Card","Spinner","Alert","Button","Container","ListGroup","Editor","useMonaco","toast","CopyToClipboard","FaPlus","FaPlayCircle","FaCheckCircle","FaTimesCircle","FaCopy","jsxDEV","_jsxDEV","Fragment","_Fragment","SnippetPage","theme","_s","id","snippet","setSnippet","loading","setLoading","error","setError","editorRef","monaco","analysis","setAnalysis","isAnalyzing","setIsAnalyzing","fetchSnippet","response","get","data","err","_err$response","_err$response$data","message","handleEditorDidMount","editor","_monacoInstance","current","processMarkers","markers","isPython","severityError","MarkerSeverity","Error","length","type","formattedSuggestions","map","marker","_marker$messageText","_marker$messageText$i","_marker$messageText2","_marker$messageText2$","_marker$messageText3","_marker$messageText3$","_marker$messageText4","_marker$messageText4$","_marker$message","_marker$message$inclu","_marker$messageText5","_marker$messageText5$","_marker$message2","_marker$message2$incl","_marker$start","customSuggestion","messageText","includes","call","startLineNumber","split","tagName","category","severity","line","start","suggestion","handleAnalyzeCode","console","language","model","getModel","modelUri","uri","post","code","content","worker","languages","typescript","getTypeScriptWorker","client","diagnostics","Promise","all","getSyntacticDiagnostics","toString","getSemanticDiagnostics","allDiagnostics","flat","formattedMarkers","diag","getLineCount","Warning","focus","setTimeout","getModelMarkers","resource","onCopyCode","success","fluid","className","children","as","to","variant","fileName","_jsxFileName","lineNumber","columnNumber","Header","Date","createdAt","toLocaleString","Body","height","value","onMount","options","readOnly","domReadOnly","minimap","enabled","validate","Footer","onClick","disabled","animation","size","role","text","onCopy","_c","$RefreshReg$"],"sources":["C:/Users/RACHEL BRATHAB/Desktop/CodeBinProject/codebin-ui/src/components/SnippetPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { Card, Spinner, Alert, Button, Container, ListGroup } from 'react-bootstrap';\r\nimport Editor, { useMonaco } from '@monaco-editor/react'; // 1. Import useMonaco\r\nimport { toast } from 'react-hot-toast';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport { FaPlus, FaPlayCircle, FaCheckCircle, FaTimesCircle, FaCopy } from 'react-icons/fa';\r\n\r\nconst SnippetPage = ({ theme }) => {\r\n  const { id } = useParams();\r\n  const [snippet, setSnippet] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  \r\n  const editorRef = useRef(null);\r\n  // const monacoRef = useRef(null); // No longer needed for analysis\r\n  const monaco = useMonaco(); // 2. Get the monaco instance via hook\r\n  const [analysis, setAnalysis] = useState([]);\r\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    // ... (This hook is unchanged)\r\n    const fetchSnippet = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError('');\r\n        const response = await axios.get(`http://localhost:5000/api/snippets/${id}`);\r\n        setSnippet(response.data);\r\n      } catch (err) {\r\n        setError(err.response?.data?.message || 'Snippet not found.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchSnippet();\r\n  }, [id]);\r\n\r\n  function handleEditorDidMount(editor, _monacoInstance) { // Renamed _monacoInstance\r\n    editorRef.current = editor;\r\n    // monacoRef.current = monaco; // No longer needed\r\n  }\r\n\r\n  // --- UPDATED Helper Function ---\r\n  // Formats errors from both sources\r\n  const processMarkers = (markers, isPython = false) => {\r\n    // 3. Check if monaco is available before using MarkerSeverity\r\n    const severityError = monaco ? monaco.MarkerSeverity.Error : 8; // Default to 8 if monaco isn't ready\r\n    \r\n    if (markers.length === 0) {\r\n      setAnalysis([{ \r\n        type: 'success', \r\n        message: 'No errors or warnings found. This code looks clean!' \r\n      }]);\r\n    } else {\r\n      const formattedSuggestions = markers.map(marker => {\r\n        \r\n        // This formats errors from Monaco/TypeScript service (JS, HTML, etc.)\r\n        if (!isPython) {\r\n          let customSuggestion = 'Review the error and your code logic.';\r\n          if (marker.messageText?.includes?.(\"';' expected\")) { // Check messageText for TS diagnostics\r\n            customSuggestion = `Suggestion: Try adding a semicolon ';' at the end of line ${marker.startLineNumber - 1}.`;\r\n          }\r\n          if (marker.messageText?.includes?.(\"is not defined\")) {\r\n             customSuggestion = `Suggestion: Make sure the variable or function \"${marker.messageText.split(\"'\")[1]}\" is defined, imported, and spelled correctly.`;\r\n          }\r\n          if (marker.messageText?.includes?.(\"Expected corresponding closing tag\")) {\r\n            const tagName = marker.messageText.split(\"'\")[1];\r\n            customSuggestion = `Suggestion: The <${tagName}> tag on line ${marker.startLineNumber} is not closed. Try adding a </${tagName}> tag.`;\r\n          }\r\n          if ((marker.messageText?.includes?.(\"Cannot assign to\") || marker.message?.includes?.(\"Cannot assign to\")) && (marker.messageText?.includes?.(\"constant\") || marker.message?.includes?.(\"constant\"))) {\r\n            customSuggestion = `Suggestion: You declared this variable with 'const', which means it cannot be reassigned. Use 'let' instead if you need to change its value.`;\r\n          }\r\n          \r\n          return {\r\n             // TS diagnostics use 'category', Monaco markers use 'severity'\r\n            type: (marker.category === 1 /* Error */ || marker.severity === severityError) ? 'danger' : 'warning',\r\n            // TS diagnostics use 0-based lines from getSemanticDiagnostics, Monaco markers are 1-based\r\n            line: marker.startLineNumber || (marker.start?.line || 0) + 1,\r\n             // TS diagnostics use messageText (can be complex object), Monaco markers use message\r\n            message: typeof marker.messageText === 'string' ? marker.messageText : marker.message || \"Unknown error\",\r\n            suggestion: customSuggestion\r\n          };\r\n        } \r\n        \r\n        // This formats errors from our py_compile API\r\n        else {\r\n          let customSuggestion = `Suggestion: ${marker.message}.`;\r\n          if (marker.message.includes(\"Invalid syntax\")) {\r\n             customSuggestion = `Suggestion: ${marker.message}. Check for typos (like 'defs' instead of 'def'), missing colons, or incorrect indentation.`;\r\n          }\r\n          return {\r\n            type: 'danger',\r\n            line: marker.line,\r\n            message: marker.message,\r\n            suggestion: customSuggestion\r\n          };\r\n        }\r\n      });\r\n      setAnalysis(formattedSuggestions);\r\n    }\r\n    setIsAnalyzing(false);\r\n  };\r\n\r\n  // --- THIS IS THE FINAL \"ANALYZE\" FUNCTION ---\r\n  const handleAnalyzeCode = async () => {\r\n    // 4. Check for editorRef AND the monaco instance from the hook\r\n    if (!editorRef.current || !monaco) {\r\n        console.error(\"Editor or Monaco instance not ready.\");\r\n        return;\r\n    }\r\n    \r\n    setIsAnalyzing(true);\r\n    setAnalysis([]);\r\n    \r\n    const language = snippet.language;\r\n    const model = editorRef.current.getModel();\r\n    if (!model) {\r\n        console.error(\"Editor model not found.\");\r\n        setIsAnalyzing(false);\r\n        return;\r\n    }\r\n    const modelUri = model.uri;\r\n    \r\n    // --- ROUTE 1: PYTHON ANALYSIS (Back-end) ---\r\n    if (language === 'python') {\r\n      try {\r\n        const response = await axios.post('http://localhost:5000/api/analyze/python', {\r\n          code: snippet.content\r\n        });\r\n        processMarkers(response.data, true);\r\n      } catch (err) {\r\n        setAnalysis([{ type: 'danger', message: 'Error running Python analyzer on server.' }]);\r\n        setIsAnalyzing(false);\r\n      }\r\n    } \r\n    \r\n    // --- ROUTE 2: MONACO/TYPESCRIPT ANALYSIS (Front-end) ---\r\n    // This now directly asks the language service worker for errors\r\n    else if (language === 'javascript' || language === 'typescript') {\r\n        // Get the worker proxy for TypeScript/JavaScript\r\n        const worker = await monaco.languages.typescript.getTypeScriptWorker();\r\n        const client = await worker(modelUri);\r\n        \r\n        // Request both syntactic and semantic diagnostics (errors/warnings)\r\n        const diagnostics = await Promise.all([\r\n             client.getSyntacticDiagnostics(modelUri.toString()),\r\n             client.getSemanticDiagnostics(modelUri.toString())\r\n        ]);\r\n        \r\n        // Flatten the array of arrays into a single array\r\n        const allDiagnostics = diagnostics.flat();\r\n        \r\n        // Convert TypeScript Diagnostic objects into a format processMarkers understands\r\n        const formattedMarkers = allDiagnostics.map(diag => ({\r\n            startLineNumber: (diag.start / model.getLineCount()) + 1, // Approximate line number calculation might be needed if start isn't available\r\n             // Alternatively, if diag.start has line/character:\r\n            // startLineNumber: diag.start.line + 1,\r\n            messageText: diag.messageText, // Use messageText for TS diagnostics\r\n            category: diag.category, // 1 for Error, others for Warning/Suggestion/Message\r\n            // Add severity if needed, mapping from category\r\n             severity: diag.category === 1 ? monaco.MarkerSeverity.Error : monaco.MarkerSeverity.Warning\r\n        }));\r\n\r\n        processMarkers(formattedMarkers, false);\r\n\r\n    } else {\r\n        // Fallback for HTML/CSS/Other - use getModelMarkers (might still be unreliable)\r\n        editorRef.current.focus(); // Wake up the linter (might still be needed here)\r\n        setTimeout(() => { // Give it a moment\r\n            const markers = monaco.editor.getModelMarkers({ resource: modelUri });\r\n            processMarkers(markers, false);\r\n        }, 300); // Small delay before checking markers for non-TS/JS languages\r\n    }\r\n  };\r\n  \r\n  const onCopyCode = () => {\r\n    toast.success('Code copied to clipboard!');\r\n  };\r\n\r\n  // ... (Loading and Error states are unchanged)\r\n  if (loading) { /* ... */ }\r\n  if (error) { /* ... */ }\r\n\r\n  return (\r\n    <Container fluid className=\"mb-4\">\r\n      <Button as={Link} to=\"/\" variant=\"secondary\" className=\"mb-3\">\r\n        <FaPlus className=\"me-2\" /> Create New Snippet\r\n      </Button>\r\n      \r\n      {snippet && (\r\n        <Card className=\"editor-card\">\r\n          <Card.Header>\r\n            Language: <strong>{snippet.language}</strong> | Created: {new Date(snippet.createdAt).toLocaleString()}\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Editor\r\n              height=\"60vh\"\r\n              theme={theme === 'dark' ? 'vs-dark' : 'vs-light'}\r\n              language={snippet.language}\r\n              value={snippet.content}\r\n              onMount={handleEditorDidMount} // Keep onMount\r\n              options={{\r\n                readOnly: true,\r\n                domReadOnly: true,\r\n                minimap: { enabled: true },\r\n                validate: true // Keep validate true\r\n              }}\r\n            />\r\n          </Card.Body>\r\n          \r\n          <Card.Footer>\r\n            <div className=\"d-flex align-items-center\">\r\n              <Button variant=\"success\" onClick={handleAnalyzeCode} className=\"py-2\" disabled={isAnalyzing}>\r\n                {/* ... button content ... */}\r\n                 {isAnalyzing ? (\r\n                   <> <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> <span className=\"ms-2\">Analyzing...</span> </>\r\n                 ) : (\r\n                   <> <FaPlayCircle className=\"me-2\" /> Analyze Code </>\r\n                 )}\r\n              </Button>\r\n              <CopyToClipboard text={snippet.content} onCopy={onCopyCode}>\r\n                <Button variant=\"primary\" className=\"ms-2 py-2\">\r\n                  <FaCopy className=\"me-2\" /> Copy Code\r\n                </Button>\r\n              </CopyToClipboard>\r\n            </div>\r\n            \r\n            {analysis.length > 0 && (\r\n              // ... (Analysis results section is unchanged)\r\n              <div className=\"mt-4\"> /* ... */ </div>\r\n            )}\r\n          </Card.Footer>\r\n        </Card>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SnippetPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}